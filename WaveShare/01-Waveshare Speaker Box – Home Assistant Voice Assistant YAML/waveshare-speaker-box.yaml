packages:
  main: !include WS-Speaker-Box/waveshare-speaker-box-main.yaml
    
substitutions:
  device_name: waveshare-speaker-box
  friendly_name: WaveShare Speaker Box

  # --- Battery settings (based on demo project) ---
  bat_adc_pin: GPIO8              # BAT_ADC_PIN=8
  divider_ratio: "3.0"            # 1:3 divider → scale up by 3.0
  calibration_offset: "0.990476"  # ADC calibration factor

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: esp-idf 
    version: recommended
  flash_size: 16MB                          # 16MB flash size
  partitions: WS-Speaker-Box/partitions.csv # Custom partition table

# PSRAM settings
psram:
  mode: octal
  speed: 80MHz

logger:
  level: DEBUG
  hardware_uart: USB_SERIAL_JTAG

api:

ota:
  - platform: esphome

web_server:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # use_address: 192.168.100.179

  ap:
    ssid: "SpeakerBox Fallback"

captive_portal:

# I2C for expander/touch
i2c:
  id: bus_a
  sda: GPIO11
  scl: GPIO10
  frequency: 400kHz
  scan: true

# TI PCA/TCA9554 expander (addresses EXIO pins)
pca9554:
  - id: io_expander
    address: 0x20

# Backlight (GPIO5)
output:
  - platform: ledc
    id: lcd_backlight_pwm
    pin: GPIO5
    frequency: 1000Hz
    min_power: 0.1    # 10% brightness floor (never off)
    max_power: 1.0    # 100% max brightness (avoid full power)

# LCD Backlight
light:
  - platform: monochromatic
    id: lcd_backlight
    name: "LCD Backlight"
    output: lcd_backlight_pwm
    restore_mode: ALWAYS_ON
    gamma_correct: 2.2

# Quad-SPI bus
spi:
  - id: display_qspi
    type: quad
    clk_pin: GPIO40
    data_pins:
      - number: GPIO46
        ignore_strapping_warning: true
      - number: GPIO45
        ignore_strapping_warning: true
      - GPIO42
      - GPIO41

# Quad-SPI DBI display driver
display:
  - platform: qspi_dbi
    id: main_lcd
    model: JC3636W518
    spi_id: display_qspi
    cs_pin: GPIO21
    reset_pin: { pca9554: io_expander, number: 1, mode: { output: true } }
    dimensions: { width: 360, height: 360 }
    color_order: rgb
    data_rate: 40MHz
    update_interval: 16ms # never

# Touchscreen
touchscreen:
  - platform: cst816
    id: touch
    i2c_id: bus_a
    address: 0x15
    interrupt_pin: GPIO4
    reset_pin:
      pca9554: io_expander
      number: 0
      mode: { output: true }
    skip_probe: true

# ───────── Simple LVGL test page with a button ───────
# lvgl:
#   displays:
#     - main_lcd
#   touchscreens:
#     - touch
#   widgets:
#     - button:
#         align: CENTER
#         width: 160
#         height: 80
#         on_click:
#           - logger.log: "LVGL: button clicked"
#         widgets:
#           - label:
#               align: CENTER
#               text: "Touch me"

# ────────────────── Battery Sensors ──────────────────
sensor:
  # Raw ADC → pin voltage in V (ESP-IDF). We scale to pack voltage and calibrate.
  - platform: adc
    id: bat_voltage
    name: "${friendly_name} Battery Voltage"
    pin: ${bat_adc_pin}
    attenuation: 12db            # read up to ~3.3–3.6 V
    update_interval: 10s
    unit_of_measurement: V
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 2
    filters:
      - lambda: |-
          // x = pin voltage (V). Multiply by divider and correct with your offset.
          return (x * ${divider_ratio}) / ${calibration_offset};

  # Percentage based on a LiPo curve (clamped 0–100%)
  - platform: template
    id: bat_percent
    name: "${friendly_name} Battery"
    unit_of_measurement: "%"
    device_class: battery
    state_class: measurement
    accuracy_decimals: 0
    update_interval: 10s
    lambda: |-
      const float v = id(bat_voltage).state;
      if (isnan(v)) return NAN;
      float pct;
      if      (v <= 3.30f) pct = 0.0f;    // empty
      else if (v >= 4.20f) pct = 100.0f;  // full
      else {
        // piecewise approximation: 3.50V→10%, 3.70V→50%, 3.95V→90%
        if (v <  3.50f)      pct =  (v - 3.30f) * (10.0f / (3.50f - 3.30f));
        else if (v < 3.70f)  pct = 10.0f + (v - 3.50f) * (40.0f / (3.70f - 3.50f));
        else if (v < 3.95f)  pct = 50.0f + (v - 3.70f) * (40.0f / (3.95f - 3.70f));
        else                 pct = 90.0f + (v - 3.95f) * (10.0f / (4.20f - 3.95f));
      }
      if (pct < 0.0f)  pct = 0.0f;
      if (pct > 100.0f) pct = 100.0f;
      return pct;
